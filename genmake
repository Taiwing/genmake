#!/bin/zsh

########################## input/option variables ##############################

PROJDIR=$(pwd)
PWDIR=$PROJDIR
TYPE="exec"
NAME="exec"

################################# utils ########################################

function usage {
	printf "usage: genmake [path] [-vdh] [-t type] [-n name] [-s[t | n | tn] path]\n\n"
	printf "options:\n"
	printf "	-h | --help:	Print this.\n"
	printf "	-t | --type:	The next argument is the type\n"
	printf "			of the target that the generated\n"
	printf "			makefile will create. That value\n"
	printf "			can be 'exec 'or 'lib', where the\n"
	printf "			first one refers to a program, and\n"
	printf "			the second to a library (compiles\n"
	printf "			a program by default). The type will\n"
	printf "			be set to library if a name is provided\n"
	printf "			and it ends with '.a' suffix.\n"
	printf "	-n | --name:	Name of the target ('exec' by default\n"
	printf "			or 'lib.a' if type is 'lib'). A suffix\n"
	printf "			'.a' will be added to the name if the\n"
	printf "			type of the target is 'lib' and the\n"
	printf "			extension is not present.\n"
	printf "	-v | --verbose:	Print additional informations\n"
	printf "	-d | --debug:	Print even more additional informations\n"
	printf "	-s | --subproject:	Declare a directory as a subproject\n"
	printf "			with its own Makefile. A rule to make it will be\n"
	printf "			added to the final Makefile. --type and --name\n"
	printf "			can be used with --subproject.\n"
}

function atoi() {
	local I=0
	local C=0
	while [ "${1:$C:1}" != "" ]; do
		case ${1:$C:1} in
		0 )			I=$((I*10))
					;;
		1 )			I=$((I*10))
					I=$((I+1))
					;;
		2 )			I=$((I*10))
					I=$((I+2))
					;;
		3 )			I=$((I*10))
					I=$((I+3))
					;;
		4 )			I=$((I*10))
					I=$((I+4))
					;;
		5 )			I=$((I*10))
					I=$((I+5))
					;;
		6 )			I=$((I*10))
					I=$((I+6))
					;;
		7 )			I=$((I*10))
					I=$((I+7))
					;;
		8 )			I=$((I*10))
					I=$((I+8))
					;;
		9 )			I=$((I*10))
					I=$((I+9))
					;;
		* )			break
		esac
		C=$((C+1))
	done
	return $((I))
}

################################## update ######################################

GMDIR=$(dirname $0)
SCRIPTNAME="$0"
ARGS="$@"
BRANCH="master"

self_update() {
	cd $GMDIR
    git fetch
    [ -n $(git diff --name-only origin/$BRANCH) ] && {
        echo "Found a new version of me, updating myself..."
        git pull --force
        git checkout $BRANCH
        git pull --force
        echo "Running the new version..."
		cd $PROJDIR
        exec "$SCRIPTNAME" "$@"
        # Now exit this old instance
        exit 1
    }
    echo "Already the latest version."
	cd $PROJDIR
}

############################## option parser ###################################

VERB=0
DEBUG=0
SUBCOUNT=0
SUBPATHS=""
SUBTYPES=""
SUBNAMES=""
while [ "$1" != "" ]; do
	OPT=$1
	case $OPT in
	-h | --help )
		usage
		exit 0
		;;
	-t | --type )
		shift
		TYPE=$1
		;;
	-n | --name )
		shift
		NAME=$1
		;;
	-s | --subproject )
		shift
		SUBCOUNT=$((SUBCOUNT+1))
		SUBPATHS+="$1"$'\n'
		SUBTYPES+="lib"$'\n'
		SUBNAMES+="lib"$SUBCOUNT$'.a\n'
		;;
	-stn | -snt | -nts | -nst | -tns | -tsn | -st | -ts | -sn | -ns )
		SUBCOUNT=$((SUBCOUNT+1))
		LEN=${#OPT}
		for ((c=1; c<$LEN; c++)); do
			shift
			if [ -z "$1" ]; then
				break
			fi
			if [[ ${OPT:$c:1} == "s" ]]; then
				SUBPATHS+="$1"$'\n'
			elif [[ ${OPT:$c:1} == "t" ]]; then
				SUBTYPES+="$1"$'\n'
			elif [[ ${OPT:$c:1} == "n" ]]; then
				SUBNAMES+="$1"$'\n'
			fi
		done
		if [ $LEN -lt 4 ]; then
			LEN=$((LEN-1))
			if [[ ${OPT:$LEN:1} == "s" ]]; then
				LEN=$((LEN-1))
			fi
			#if we have a subproject provided with only a name ending
			#whith ".a" the type will default to a library
			if [[ ${OPT:$LEN:1} == "t" ]]; then
				SUBNAMES+="default"$'\n'
			elif [[ ${OPT:$LEN:1} == "n" ]]; then
				if [ ${#SUBNAMES} -gt 4 ] && [[ ${SUBNAMES:${#SUBNAMES}-3:2} == ".a" ]]; then
					SUBTYPES+=$'lib\n'
				else
					SUBTYPES+=$'exec\n'
				fi
			fi
		fi
		;;
	-v | --verbose )
		VERB=1
		;;
	-d | --debug )
		VERB=1
		DEBUG=1
		;;
	* )
		if [ "$PROJDIR" != "$PWDIR" ]; then
			echo "genmake: \""$1"\" is not a valid argument or option."
			exit 1
		else
			if [[ ${OPT:0:1} == "/" ]]; then
				PROJDIR=$OPT
			else
				PROJDIR=$PWDIR/$OPT
			fi
			atoi ${#PROJDIR}
			LEN=$?
			LEN=$((LEN-=1))
			if [ ${#OPT} -gt 1 ] && [[ ${PROJDIR:$LEN:1} == "/" ]]; then
				PROJDIR=${PROJDIR:0:$LEN}
			fi
			OPT=""
		fi
	esac
	if [ "$OPT" != "" ] && [ -z "$1" ]; then
		echo "genmake: no argument given for \"$OPT\" option"
		exit 1
	fi
	shift
done

if [ ${#NAME} -gt 2 ] && [[ ${NAME:${#NAME}-2:2} == ".a" ]]; then
	TYPE="lib"
fi

############################### debug values ###################################

if [ $VERB != 0 ]; then
	printf "PROJDIR: %s\n" $PROJDIR
	printf "PWDIR: %s\n" $PWDIR
	printf "GMDIR: %s\n" $GMDIR
	printf "TYPE: %s\n" $TYPE
	printf "NAME: %s\n" $NAME
	printf "SUBCOUNT: %d\n" $SUBCOUNT
	printf "SUBPATHS: %s\n" $SUBPATHS
	printf "SUBTYPES: %s\n" $SUBTYPES
	printf "SUBNAMES: %s\n" $SUBNAMES
fi

############################## make makefile ###################################

ERR=0

printf "making Makefile...\n"

if [ $DEBUG != 0 ]; then
	make -C $GMDIR PROJDIR=$PROJDIR TYPE=$TYPE TARG=$NAME DEBUG=$DEBUG\
		SUBCOUNT=$SUBCOUNT SUBPATHS=$SUBPATHS SUBTYPES=$SUBTYPES\
		SUBNAMES=$SUBNAMES
	ERR=$?
	rm -f $GMDIR/odeps
else
	make -C $GMDIR PROJDIR=$PROJDIR TYPE=$TYPE TARG=$NAME SUBCOUNT=$SUBCOUNT\
		SUBPATHS=$SUBPATHS SUBTYPES=$SUBTYPES SUBNAMES=$SUBNAMES > /dev/null
	ERR=$?
	rm -f $GMDIR/odeps > /dev/null
fi

if [ $ERR != 0 ]; then
	printf "error: unable to make makefile :(\n"
else
	printf "Makefile ready !\n"
fi

